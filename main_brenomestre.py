# -*- coding: utf-8 -*-
"""main_BrenoMestre.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cHnoC2Ep0vGN1jHRY7W0g6Rqs_ON73Me
"""


import json
import pandas as pd
import numpy as np
import requests
from bs4 import BeautifulSoup
import os
import time

url_rodada = "https://api.cartolafc.globo.com/mercado/status"
texto_rodada = requests.get(url_rodada).text
rodada = int(texto_rodada.split('{"rodada_atual":')[1].split(',"status_mercado":')[0])

url_mercado = "https://api.cartolafc.globo.com/atletas/mercado"
texto_mercado = requests.get(url_mercado).text


url_partidas = "https://api.cartolafc.globo.com/partidas"
texto_partidas = requests.get(url_partidas).text

url_rodada_passada = f"https://api.cartolafc.globo.com/partidas/{rodada-1}"
texto_rodada_passada = requests.get(url_rodada_passada).text

#criando txt com os textos extraídos anteriormente para que o json.load(.json) funcione
if os.path.exists(f'dados_api/mercado{rodada-1}.txt'):
  os.remove(f'dados_api/mercado{rodada-1}.txt')
f = open(f'dados_api/mercado{rodada-1}.txt', mode='x', encoding = 'utf-8')
f.write(texto_mercado)
f.close()

if os.path.exists(f'dados_api/partidas{rodada}.txt'):
  os.remove(f'dados_api/partidas{rodada}.txt')
f = open(f'dados_api/partidas{rodada}.txt', mode='x', encoding = 'utf-8')
f.write(texto_partidas)
f.close()

if os.path.exists(f'dados_api/rodada{rodada-1}.txt'):
  os.remove(f'dados_api/rodada{rodada-1}.txt')
f = open(f'dados_api/rodada{rodada-1}.txt', mode='x', encoding = 'utf-8')
f.write(texto_rodada_passada)
f.close()

json_mercado = json.load(open(f'dados_api/mercado{rodada-1}.txt', encoding = 'utf-8'))
json_partida = json.load(open(f'dados_api/partidas{rodada}.txt', encoding = 'utf-8'))
json_rodada = json.load(open(f'dados_api/rodada{rodada-1}.txt', encoding = 'utf-8'))

dict_aux = { '7': {'abreviacao': 'LD', 'id': 7, 'nome': 'Lateral Direito'}, '8': {'abreviacao': 'LE', 'id': 8, 'nome': 'Lateral Esquerda'}}
json_mercado['posicoes'].update(dict_aux)


df_proxima_partida = pd.DataFrame.from_dict(json_partida['partidas']).drop(['partida_data', 'timestamp', 'local', 'placar_oficial_mandante', 'placar_oficial_visitante', 'status_transmissao_tr', 'inicio_cronometro_tr', 'status_cronometro_tr', 'periodo_tr', 'transmissao'], axis = 1)
df_rodada_jogada = pd.DataFrame.from_dict(json_rodada['partidas']).drop(['partida_data', 'timestamp', 'local', 'status_transmissao_tr', 'inicio_cronometro_tr', 'status_cronometro_tr', 'periodo_tr', 'transmissao'], axis = 1)

def calcula_aproveitamento(list_aproveitamento):
  aproveitamento = (list_aproveitamento.count('e')*1+list_aproveitamento.count('v')*3)/((list_aproveitamento.count('e')+list_aproveitamento.count('v')+list_aproveitamento.count('d'))*3)
  return round(aproveitamento, 2)


df_proxima_partida['aproveitamento_mandante'] = df_proxima_partida['aproveitamento_mandante'].apply(lambda x: calcula_aproveitamento(x))
df_proxima_partida['aproveitamento_visitante'] = df_proxima_partida['aproveitamento_visitante'].apply(lambda x: calcula_aproveitamento(x))

df_rodada_jogada['aproveitamento_mandante'] = df_rodada_jogada['aproveitamento_mandante'].apply(lambda x: calcula_aproveitamento(x))
df_rodada_jogada['aproveitamento_visitante'] = df_rodada_jogada['aproveitamento_visitante'].apply(lambda x: calcula_aproveitamento(x))


def cria_dict_scouts(scout):
  """
  Função para criar um dicionário com os scouts do jogador
  
  Argumento: Dicionário com os scouts
  Saída: Dicionário com todos os scouts. Se o jogador não tem determinado scout, a função define como 0
  """
  siglas_scout = ['G', 'A', 'FT', 'FD', 'FF', 'FS', 'PP', 'I', 'PI', 'PS', 'SG', 'DP', 'DE', 'DS', 'GC', 'CV', 'CA', 'GS', 'FC', 'PC']
  new_dict = {}
  for siglas in siglas_scout:
    
    if atleta['scout'] is None:
      new_dict.update({siglas:0})

    else:
      if siglas not in scout.keys():
        new_dict.update({siglas:0})
      else:
        new_dict.update({siglas:scout[siglas]})
  return new_dict

dicionario_mercado = json_mercado['atletas']

for atleta in dicionario_mercado:
  scouts = cria_dict_scouts(atleta['scout'])
  atleta.update(scouts)
  atleta.pop('scout')

def inclui_clube(ID:int):
  return json_mercado['clubes'][str(ID)]['abreviacao']

def inclui_status(Status_ID:int):
  return json_mercado['status'][str(Status_ID)]['nome']

def inclui_posicao(Posicao_ID:int):
  return json_mercado['posicoes'][str(Posicao_ID)]['nome']

def inclui_mando(id_clube):
  
  if id_clube in df_rodada_jogada.clube_casa_id.unique():
    return 1
  elif id_clube in df_rodada_jogada.clube_visitante_id.unique():
    return 0 
  else:
    return np.nan

def inclui_adversario(clube_id):
  df_aux_home = df_rodada_jogada.set_index('clube_casa_id')
  df_aux_alway = df_rodada_jogada.set_index('clube_visitante_id')

  if clube_id in df_aux_home.index:
    return df_aux_home.loc[clube_id]['clube_visitante_id']
  elif clube_id in df_aux_alway.index:
    return df_aux_alway.loc[clube_id]['clube_casa_id']
  else:
    return np.nan

def inclui_mando_proxima_rodada(id_clube):
  if id_clube in df_proxima_partida.clube_casa_id.unique():
    return 1
  elif id_clube in df_proxima_partida.clube_visitante_id.unique():
    return 0 
  else:
    return np.nan
df_mercado = pd.DataFrame.from_dict(dicionario_mercado)

df_mercado['Clube_nome'] = df_mercado['clube_id'].apply(lambda x: inclui_clube(x))
df_mercado['Status_nome'] = df_mercado['status_id'].apply(lambda x: inclui_status(x))
df_mercado['Posicao_nome'] = df_mercado['posicao_id'].apply(lambda x: inclui_posicao(x))
df_mercado['Mandante'] = df_mercado['clube_id'].apply(lambda x: inclui_mando(x))
df_mercado['Adversario'] = df_mercado['clube_id'].apply(lambda x: inclui_adversario(x))
df_mercado['Adversario_nome'] = df_mercado['Adversario'].apply(lambda x: inclui_clube(x))
df_mercado['Mando_clube_prox_rdd'] = df_mercado['clube_id'].apply(lambda x: inclui_mando_proxima_rodada(x))
df_mercado['Mando_adversario_prox_rdd'] = df_mercado['Adversario'].apply(lambda x: inclui_mando_proxima_rodada(x))


df_mercado.columns=['ID', 'Rodada', 'Clube_ID', 'Posicao_ID', 'Status_ID', 'Pontos', 'Preco', 'Variacao', 'Media', 'Jogos', 'Min_Valorizarcao','GatoMestre', 'Slug', 'Apelido', 'Apelido_abreviado', 'Nome', 'Foto', 'G', 'A', 'FT', 'FD', 'FF', 'FS', 'PP', 'I', 'PI', 'PS', 'SG', 'DP', 'DE', 'DS', 'GC', 'CV', 'CA', 'GS', 'FC', 'PC', 'Clube_nome', 'Status_nome', 'Posicao_nome', 'Mandante', 'Adversario', 'Adversario_nome', 'Mando_clube_prox_rdd', 'Mando_adversario_prox_rdd']
colunas = ['ID', 'Nome', 'Apelido', 'Apelido_abreviado', 'Slug', 'Foto', 'Posicao_ID', 'Posicao_nome', 'Status_ID', 'Status_nome', 'Clube_ID', 'Clube_nome', 'Adversario', 'Adversario_nome', 'Mandante', 'Rodada', 'Pontos','Mando_clube_prox_rdd','Mando_adversario_prox_rdd', 'Preco', 'Min_Valorizarcao', 'Variacao','GatoMestre', 'Media', 'Jogos', 'G', 'A', 'FT', 'FD', 'FF', 'FS', 'PP', 'I', 'PI', 'PS', 'SG', 'DP', 'DE', 'DS', 'GC', 'CV', 'CA', 'GS', 'FC', 'PC']
df_mercado = df_mercado[colunas]

df_mercado.to_excel(f"mercado_bruto/Mercado_bruto_rodada{rodada}.xlsx", index=False)
df_rodada_jogada.to_excel(f"rodadas/{rodada-1}.xlsx", index = False)

if rodada == 2:
  df_diferenca_mercado = df_mercado 


  df_bck_mercado = df_diferenca_mercado.copy()

else:
  df_mercado_rdd_anterior = pd.read_excel(f"mercado_bruto/Mercado_bruto_rodada{rodada-1}.xlsx")



  info_possiveis_mercado = ['ID', 'G', 'A', 'FT', 'FD', 'FF', 'FS', 'PP', 'I', 'PI', 'PS', 'SG', 'DP', 'DE', 'DS', 'GC', 'CV', 'CA', 'GS', 'FC', 'PC']

  df_diferenca_mercado = (df_mercado[info_possiveis_mercado].set_index("ID") - df_mercado_rdd_anterior[info_possiveis_mercado].set_index("ID")).reset_index()
  df_diferenca_mercado.dropna(inplace = True)

  coluna_adicionavel_mercado = []

  for coluna in list(df_mercado.columns): 
    if ((coluna not in info_possiveis_mercado) == True):
      if coluna!= 'GatoMestre':
        coluna_adicionavel_mercado.append(coluna)



  df_bck_mercado = df_diferenca_mercado.copy()

  df_bck_mercado = df_bck_mercado.set_index("ID")

  for id in df_diferenca_mercado.ID.unique():
    for coluna in coluna_adicionavel_mercado:     
      df_bck_mercado.loc[[id], [coluna]] = df_mercado[df_mercado['ID'] == id][coluna].values[0]

  df_bck_mercado = df_bck_mercado.reset_index()
  if 'GatoMestre' not in df_bck_mercado.columns:
    df_bck_mercado['GatoMestre'] = np.nan
  df_bck_mercado = df_bck_mercado[df_mercado.columns]

df_bck_mercado.to_excel(f'mercado_diff/diferenca{rodada-1}.xlsx', index = None) #diferenca sofascore

if rodada == 2:
  df_aux_mercado = df_bck_mercado


else:
  df_completo_mercado = pd.read_excel("completo_mercado.xlsx")
  df_aux_mercado = pd.concat([df_completo_mercado, df_bck_mercado])


df_aux_mercado.to_excel("completo_mercado.xlsx", index=None)


